// Code generated by MockGen. DO NOT EDIT.
// Source: shipping.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "go-bookstore/internal/order/model"
	model0 "go-bookstore/internal/product/model"
	model1 "go-bookstore/internal/shipping/model"
	model2 "go-bookstore/internal/user/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIShippingRepository is a mock of IShippingRepository interface.
type MockIShippingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIShippingRepositoryMockRecorder
}

// MockIShippingRepositoryMockRecorder is the mock recorder for MockIShippingRepository.
type MockIShippingRepositoryMockRecorder struct {
	mock *MockIShippingRepository
}

// NewMockIShippingRepository creates a new mock instance.
func NewMockIShippingRepository(ctrl *gomock.Controller) *MockIShippingRepository {
	mock := &MockIShippingRepository{ctrl: ctrl}
	mock.recorder = &MockIShippingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIShippingRepository) EXPECT() *MockIShippingRepositoryMockRecorder {
	return m.recorder
}

// Checkout mocks base method.
func (m *MockIShippingRepository) Checkout(c *gin.Context, shipping *model1.Shipping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", c, shipping)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockIShippingRepositoryMockRecorder) Checkout(c, shipping interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockIShippingRepository)(nil).Checkout), c, shipping)
}

// DeleteOrder mocks base method.
func (m *MockIShippingRepository) DeleteOrder(c *gin.Context, order *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", c, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockIShippingRepositoryMockRecorder) DeleteOrder(c, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockIShippingRepository)(nil).DeleteOrder), c, order)
}

// DeleteOrderLineById mocks base method.
func (m *MockIShippingRepository) DeleteOrderLineById(c *gin.Context, orderLine *model.OrderLine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderLineById", c, orderLine)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderLineById indicates an expected call of DeleteOrderLineById.
func (mr *MockIShippingRepositoryMockRecorder) DeleteOrderLineById(c, orderLine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderLineById", reflect.TypeOf((*MockIShippingRepository)(nil).DeleteOrderLineById), c, orderLine)
}

// DeleteProduct mocks base method.
func (m *MockIShippingRepository) DeleteProduct(c *gin.Context, product *model0.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", c, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockIShippingRepositoryMockRecorder) DeleteProduct(c, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIShippingRepository)(nil).DeleteProduct), c, product)
}

// GetAllShipping mocks base method.
func (m *MockIShippingRepository) GetAllShipping(c *gin.Context) (*[]model1.Shipping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllShipping", c)
	ret0, _ := ret[0].(*[]model1.Shipping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllShipping indicates an expected call of GetAllShipping.
func (mr *MockIShippingRepositoryMockRecorder) GetAllShipping(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllShipping", reflect.TypeOf((*MockIShippingRepository)(nil).GetAllShipping), c)
}

// GetOrderById mocks base method.
func (m *MockIShippingRepository) GetOrderById(c *gin.Context, orderId string) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", c, orderId)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockIShippingRepositoryMockRecorder) GetOrderById(c, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockIShippingRepository)(nil).GetOrderById), c, orderId)
}

// GetOrderLineById mocks base method.
func (m *MockIShippingRepository) GetOrderLineById(c *gin.Context, orderLineId string) (*model.OrderLine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderLineById", c, orderLineId)
	ret0, _ := ret[0].(*model.OrderLine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderLineById indicates an expected call of GetOrderLineById.
func (mr *MockIShippingRepositoryMockRecorder) GetOrderLineById(c, orderLineId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderLineById", reflect.TypeOf((*MockIShippingRepository)(nil).GetOrderLineById), c, orderLineId)
}

// GetProductById mocks base method.
func (m *MockIShippingRepository) GetProductById(c *gin.Context, id int) (*model0.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", c, id)
	ret0, _ := ret[0].(*model0.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockIShippingRepositoryMockRecorder) GetProductById(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockIShippingRepository)(nil).GetProductById), c, id)
}

// GetShippingById mocks base method.
func (m *MockIShippingRepository) GetShippingById(c *gin.Context, shippingId string) (*model1.Shipping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShippingById", c, shippingId)
	ret0, _ := ret[0].(*model1.Shipping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShippingById indicates an expected call of GetShippingById.
func (mr *MockIShippingRepositoryMockRecorder) GetShippingById(c, shippingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShippingById", reflect.TypeOf((*MockIShippingRepository)(nil).GetShippingById), c, shippingId)
}

// GetUserById mocks base method.
func (m *MockIShippingRepository) GetUserById(c *gin.Context, userId string) (*model2.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", c, userId)
	ret0, _ := ret[0].(*model2.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIShippingRepositoryMockRecorder) GetUserById(c, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIShippingRepository)(nil).GetUserById), c, userId)
}

// UpdateProduct mocks base method.
func (m *MockIShippingRepository) UpdateProduct(c *gin.Context, product *model0.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", c, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockIShippingRepositoryMockRecorder) UpdateProduct(c, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockIShippingRepository)(nil).UpdateProduct), c, product)
}

// UpdateUser mocks base method.
func (m *MockIShippingRepository) UpdateUser(c *gin.Context, user *model2.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", c, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIShippingRepositoryMockRecorder) UpdateUser(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIShippingRepository)(nil).UpdateUser), c, user)
}
