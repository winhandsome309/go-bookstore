// Code generated by MockGen. DO NOT EDIT.
// Source: product.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "go-bookstore/internal/product/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIProductRepo is a mock of IProductRepo interface.
type MockIProductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIProductRepoMockRecorder
}

// MockIProductRepoMockRecorder is the mock recorder for MockIProductRepo.
type MockIProductRepoMockRecorder struct {
	mock *MockIProductRepo
}

// NewMockIProductRepo creates a new mock instance.
func NewMockIProductRepo(ctrl *gomock.Controller) *MockIProductRepo {
	mock := &MockIProductRepo{ctrl: ctrl}
	mock.recorder = &MockIProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductRepo) EXPECT() *MockIProductRepoMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockIProductRepo) CreateProduct(c *gin.Context, product *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", c, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockIProductRepoMockRecorder) CreateProduct(c, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockIProductRepo)(nil).CreateProduct), c, product)
}

// DeleteProduct mocks base method.
func (m *MockIProductRepo) DeleteProduct(c *gin.Context, product *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", c, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockIProductRepoMockRecorder) DeleteProduct(c, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIProductRepo)(nil).DeleteProduct), c, product)
}

// GetAllProduct mocks base method.
func (m *MockIProductRepo) GetAllProduct(c *gin.Context) (*[]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProduct", c)
	ret0, _ := ret[0].(*[]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProduct indicates an expected call of GetAllProduct.
func (mr *MockIProductRepoMockRecorder) GetAllProduct(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProduct", reflect.TypeOf((*MockIProductRepo)(nil).GetAllProduct), c)
}

// GetProductById mocks base method.
func (m *MockIProductRepo) GetProductById(c *gin.Context, id int) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", c, id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockIProductRepoMockRecorder) GetProductById(c, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockIProductRepo)(nil).GetProductById), c, id)
}

// UpdateProduct mocks base method.
func (m *MockIProductRepo) UpdateProduct(c *gin.Context, product *model.Product, req *model.UpdateProductReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", c, product, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockIProductRepoMockRecorder) UpdateProduct(c, product, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockIProductRepo)(nil).UpdateProduct), c, product, req)
}
